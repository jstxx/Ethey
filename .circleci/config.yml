version: 2
jobs:
  build:
    working_directory: ~/terminal
    docker:
      - image: circleci/node:10.7
      - image: mongo:3.4.4
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Update NPM
          command: 'sudo npm install -g npm@latest'
      - restore_cache: # restore dep cache 
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: Update Packages
          command: 'sudo apt-get update'           
      - run:
          name: Install Base
          command: 'sudo apt-get install -y software-properties-common'
      - run:
          name: Add GPG Keys for Debian contributor repo 
          command: 'sudo wget -qO - https://deb.opera.com/archive.key | sudo apt-key add -'                     
      - run:        
          name: expose-debian-contribs 
          command: sudo add-apt-repository "deb http://http.debian.net/debian $(lsb_release -sc) contrib"
      - run:
          name: add-gpg-keys2
          command: 'sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 3B4FE6ACC0B21F32'          
      - run:
          name: update-apt-upgrade 
          command: 'sudo apt-get upgrade' 
      - run:
          name: update-apt-py 
          command: 'sudo apt-get install python3-setuptools'
      - run:
          name: update-apt-py1
          command: 'sudo apt-get -y -qq install python3.4-dev' 
      - run:
          name: update-apt-py1
          command: 'sudo easy_install3 pip' 
      # If this is to be run inside a VM 
      # - run:
      #     name: Install dependencies
      #     command: sudo pip install virtualenv
      # - run:
      #     name: Link virtualenv
      #     command: sudo easy_install3 virtualenv
      # - run:
      #     name: start-vm
      #     command: virtualenv ~/cli-ve
      # - run:
      #     name: activate-vm
      #     command: source ~/cli-ve/bin/activate
      - run:
          name: activate-vm
          command: sudo pip install --upgrade awscli                             
      - run:
          name: install-deps
          command: yarn install
      - run:
          name: up-yarn
          command: yarn upgrade                        
      - run:
          name: Build application Docker image
          command: |
            docker build -t terminal .
      - deploy:
          name: Push Up Docker image
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then

              CLUSTER='terminalClust'
              FAMILY='test-application'
              DOCKER_IMAGE='terminal'
              TASK='terminalBuild'
              SERVICE='mainService'

              # Login to AWS
              aws configure set region $AWS_REGION
              $(aws ecr get-login --no-include-email --region us-east-1)

              # Tag and push docker image

              docker tag terminal $AWS_ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com/$DOCKER_IMAGE:$CIRCLE_SHA1
              docker push $AWS_ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com/$DOCKER_IMAGE:$CIRCLE_SHA1

              task_template='[
                {
                  "name": "%s",
                  "image": "%s.dkr.ecr.%s.amazonaws.com/%s:%s",
                  "essential": true,
                  "memoryReservation": 1000,
                  "command": [
                    "npm start"
                  ], 
                  "portMappings": [
                    {
                      "containerPort": 4201,
                      "hostPort": 80
                    }
                  ],
                  "environment" : [
                      { "name" : "NODE_ENV", "value" : "production" }
                  ]
                }
              ]'

              task_def=$(printf "$task_template" $TASK $AWS_ACCOUNT_ID $AWS_REGION $TASK $CIRCLE_SHA1)

              # Register task definition
              json=$(aws ecs register-task-definition --container-definitions "$task_def" --family "$FAMILY")

              # Grab revision # using regular bash and grep
              revision=$(echo "$json" | grep -o '"revision": [0-9]*' | grep -Eo '[0-9]+')

              # Deploy revision
              aws ecs update-service --cluster $CLUSTER --service $SERVICE --task-definition $TASK:$revision
            fi